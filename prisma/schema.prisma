// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  name               String
  email              String    @unique
  password           String
  role               role      @default(User)
  phone              String
  address            String?
  public_id          String?
  url                String?
  isActive           Boolean   @default(false)
  activationToken    String?   @db.LongText
  passwordResetToken String?   @db.LongText
  passwordChangeAt   DateTime?
  createdAt          DateTime  @default(now())
  projects           Project[]
  tasks              Task[]

  @@map("users")
}

model Project {
  id              String   @id @default(uuid())
  title           String
  icon            String
  desc            String   @db.LongText
  position        Int
  onGoing         Boolean  @default(true)
  onGoingPosition Int      @default(0)
  createdAt       DateTime @default(now())

  managerId String
  manager   User      @relation(fields: [managerId], references: [id])
  sections  Section[]

  @@map("projects")
}

model Section {
  id        String   @id @default(uuid())
  title     String   @default("Untitled")
  createdAt DateTime @default(now())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  tasks     Task[]

  @@map("sections")
}

model Task {
  id        String   @id @default(uuid())
  title     String   @default("Untitled")
  desc      String?  @db.LongText
  position  Int
  createdAt DateTime @default(now())

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id])

  assignId String
  assign   User   @relation(fields: [assignId], references: [id])

  @@map("tasks")
}

enum role {
  User
  Admin
  Super_Admin
}
